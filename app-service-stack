// ... existing imports and configurations ...

// Create clusters with proper typing
interface ClusterMap {
  [key: string]: EKSClusterStack;
}

const clusters: ClusterMap = {};
for (const [key, config] of Object.entries(clusterConfigs)) {
  clusters[key] = new EKSClusterStack(app, config.name, {
    env,
    clusterName: config.name,
    ingressControllerName: ingressControllerName,
    tenantOnboardingProjectName: tenantOnboardingProjectName,
    tenantDeletionProjectName: tenantDeletionProjectName,
    sharedServiceAccountName: sharedServiceAccountName,
    kubecostToken: kubecostToken,
    customDomain: customDomain,
    hostedZoneId: hostedZoneId,
  });
}

// ... existing code ...

// Update Services Stack to use both clusters and their respective site distributions
const svcStack = new ServicesStack(app, 'Services', {
  env,
  internalNLBApiDomain: clusters.applicationServices.nlbDomain,
  eksClusterName: clusterConfigs.applicationServices.name,
  eksClusterOIDCProviderArn: clusters.applicationServices.openIdConnectProviderArn,
  codebuildKubectlRoleArn: clusters.applicationServices.codebuildKubectlRoleArn,
  appSiteDistributionId: sitesStack.applicationSiteDistribution.distributionId,
  appSiteCloudFrontDomain: sitesStack.applicationSiteDistribution.distributionDomainName,
  helmSiteDistributionId: sitesStack.helmSiteDistribution.distributionId,
  helmSiteCloudFrontDomain: sitesStack.helmSiteDistribution.distributionDomainName,
  sharedServiceAccountName: sharedServiceAccountName,
  appHostedZoneId: hostedZoneId,
  customDomain: customDomain,
  // Add helm services cluster configuration
  helmServicesClusterName: clusterConfigs.helmServices.name,
  helmServicesClusterOIDCProviderArn: clusters.helmServices.openIdConnectProviderArn,
  helmServicesNLBDomain: clusters.helmServices.nlbDomain,
  // Add VPC configurations
  applicationVpc: clusters.applicationServices.vpc,
  helmVpc: clusters.helmServices.vpc,
});

### service-stack.ts##
import { Stack, StackProps } from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import { Construct } from 'constructs';
import { ApplicationService } from './constructs/application-service';
import { HelmService } from './constructs/helm-service';

export interface ServicesStackProps extends StackProps {
  // ... existing props ...
  applicationVpc: ec2.IVpc;
  helmVpc: ec2.IVpc;
}

export class ServicesStack extends Stack {
  constructor(scope: Construct, id: string, props: ServicesStackProps) {
    super(scope, id, props);

    // Create application services
    new ApplicationService(this, 'ApplicationServices', {
      // ... existing props ...
      eksClusterName: props.eksClusterName,
      vpc: props.applicationVpc,
    });

    // Create helm services
    new HelmService(this, 'HelmServices', {
      name: 'helm-services',
      assetDirectory: './services/helm-services',
      ecrImageName: 'helm-services',
      eksClusterName: props.helmServicesClusterName,
      codebuildKubectlRole: props.codebuildKubectlRole,
      internalApiDomain: props.internalNLBApiDomain,
      serviceUrlPrefix: 'helm-services',
      clusterType: 'helm',
      clusterConfig: {
        name: props.helmServicesClusterName,
        services: ['helm-services']
      },
      vpc: props.helmVpc,
      databaseName: 'helm_services_db',
      databasePort: 5432,
      databaseEngine: rds.DatabaseClusterEngine.auroraPostgres({
        version: rds.AuroraPostgresEngineVersion.VER_14_6,
      }),
      databaseInstanceType: ec2.InstanceType.of(
        ec2.InstanceClass.T3,
        ec2.InstanceSize.MEDIUM
      ),
    });
  }
}

##helm-service.ts

import { RemovalPolicy, Stack, Duration } from 'aws-cdk-lib';
import * as codebuild from 'aws-cdk-lib/aws-codebuild';
import * as ecr from 'aws-cdk-lib/aws-ecr';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as cr from 'aws-cdk-lib/custom-resources';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';
import { Construct } from 'constructs';
import { SourceBucket } from './source-bucket';

export interface HelmServiceProps {
  readonly name: string;
  readonly assetDirectory: string;
  readonly ecrImageName: string;
  readonly eksClusterName: string;
  readonly codebuildKubectlRole: iam.IRole;
  readonly internalApiDomain: string;
  readonly serviceUrlPrefix: string;
  readonly clusterType: 'application' | 'helm';
  readonly clusterConfig: {
    name: string;
    services: string[];
  };
  readonly vpc: ec2.IVpc;
  readonly databaseName?: string;
  readonly databasePort?: number;
  readonly databaseEngine?: rds.DatabaseClusterEngine;
  readonly databaseInstanceType?: ec2.InstanceType;
}

export class HelmService extends Construct {
  readonly codeRepositoryUrl: string;
  readonly helmChartsBucket: s3.Bucket;
  readonly databaseCluster: rds.DatabaseCluster;
  readonly databaseSecret: secretsmanager.ISecret;

  constructor(scope: Construct, id: string, props: HelmServiceProps) {
    super(scope, id);

    // Create S3 bucket for Helm charts
    this.helmChartsBucket = new s3.Bucket(this, `${id}HelmChartsBucket`, {
      bucketName: `${props.name}-helm-charts-${Stack.of(this).account}`,
      removalPolicy: RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
      versioned: true,
      encryption: s3.BucketEncryption.S3_MANAGED,
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
      enforceSSL: true,
      lifecycleRules: [
        {
          expiration: { days: 90 },
          noncurrentVersionExpiration: { noncurrentDays: 30 },
        },
      ],
    });

    // Create security group for RDS
    const dbSecurityGroup = new ec2.SecurityGroup(this, `${id}DBSecurityGroup`, {
      vpc: props.vpc,
      description: 'Security group for RDS database',
      allowAllOutbound: true,
    });

    // Allow inbound access from EKS cluster
    dbSecurityGroup.addIngressRule(
      ec2.Peer.ipv4(props.vpc.vpcCidrBlock),
      ec2.Port.tcp(props.databasePort || 5432),
      'Allow access from EKS cluster'
    );

    // Create database secret
    this.databaseSecret = new secretsmanager.Secret(this, `${id}DBSecret`, {
      secretName: `${props.name}-db-credentials`,
      generateSecretString: {
        secretStringTemplate: JSON.stringify({ username: 'admin' }),
        generateStringKey: 'password',
        excludePunctuation: true,
        passwordLength: 16,
      },
    });

    // Create RDS cluster
    this.databaseCluster = new rds.DatabaseCluster(this, `${id}Database`, {
      engine: props.databaseEngine || rds.DatabaseClusterEngine.auroraPostgres({
        version: rds.AuroraPostgresEngineVersion.VER_14_6,
      }),
      instanceProps: {
        instanceType: props.databaseInstanceType || ec2.InstanceType.of(
          ec2.InstanceClass.T3,
          ec2.InstanceSize.MEDIUM
        ),
        vpc: props.vpc,
        vpcSubnets: {
          subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
        },
        securityGroups: [dbSecurityGroup],
      },
      credentials: rds.Credentials.fromSecret(this.databaseSecret),
      databaseName: props.databaseName || `${props.name.replace(/-/g, '_')}_db`,
      port: props.databasePort || 5432,
      backup: {
        retention: Duration.days(7),
        preferredWindow: '03:00-04:00',
      },
      monitoringInterval: Duration.seconds(60),
      instances: 1,
      removalPolicy: RemovalPolicy.SNAPSHOT,
    });

    // Add bucket policy to allow CodeBuild access
    this.helmChartsBucket.addToResourcePolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          's3:GetObject',
          's3:PutObject',
          's3:ListBucket',
          's3:DeleteObject',
          's3:GetObjectVersion',
        ],
        resources: [
          this.helmChartsBucket.bucketArn,
          `${this.helmChartsBucket.bucketArn}/*`,
        ],
        principals: [
          new iam.ServicePrincipal('codebuild.amazonaws.com'),
        ],
      })
    );

    // ... rest of the existing code with build projects and deployments ...

    // Add outputs for the resources
    new cdk.CfnOutput(this, 'HelmChartsBucketName', {
      value: this.helmChartsBucket.bucketName,
      description: 'Name of the S3 bucket storing Helm charts',
    });

    new cdk.CfnOutput(this, 'DatabaseEndpoint', {
      value: this.databaseCluster.clusterEndpoint.hostname,
      description: 'RDS cluster endpoint',
    });

    new cdk.CfnOutput(this, 'DatabaseSecretArn', {
      value: this.databaseSecret.secretArn,
      description: 'ARN of the database credentials secret',
    });
  }
}
