// lib/eks-cluster-stack.ts

// ... existing imports ...

export class EksClusterStack extends cdk.Stack {
  // ... existing code ...

  constructor(scope: Construct, id: string, props: EksClusterStackProps) {
    super(scope, id, props);

    // ... existing code ...

    // Create ALB Controller IAM Role
    const albControllerRole = new iam.Role(this, 'AlbControllerRole', {
      assumedBy: new iam.FederatedPrincipal(
        this.cluster.openIdConnectProvider.openIdConnectProviderArn,
        {
          StringEquals: {
            [`${this.cluster.openIdConnectProvider.openIdConnectProviderIssuer}:aud`]: 'sts.amazonaws.com',
            [`${this.cluster.openIdConnectProvider.openIdConnectProviderIssuer}:sub`]: 'system:serviceaccount:kube-system:aws-load-balancer-controller',
          },
        },
        'sts:AssumeRoleWithWebIdentity'
      ),
    });

    // Add ALB Controller policies
    albControllerRole.addManagedPolicy(
      iam.ManagedPolicy.fromAwsManagedPolicyName('AWSLoadBalancerControllerIAMPolicy')
    );

    // Add custom policy for ALB Controller
    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['iam:CreateServiceLinkedRole'],
        resources: ['*'],
        conditions: {
          StringEquals: {
            'iam:AWSServiceName': 'elasticloadbalancing.amazonaws.com'
          }
        }
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'ec2:DescribeAccountAttributes',
          'ec2:DescribeAddresses',
          'ec2:DescribeAvailabilityZones',
          'ec2:DescribeInternetGateways',
          'ec2:DescribeVpcs',
          'ec2:DescribeVpcPeeringConnections',
          'ec2:DescribeSubnets',
          'ec2:DescribeSecurityGroups',
          'ec2:DescribeInstances',
          'ec2:DescribeNetworkInterfaces',
          'ec2:DescribeTags',
          'ec2:GetCoipPoolUsage',
          'ec2:DescribeCoipPools',
          'ec2:GetSecurityGroupsForVpc',
          'ec2:DescribeIpamPools',
          'ec2:DescribeRouteTables',
          'elasticloadbalancing:DescribeLoadBalancers',
          'elasticloadbalancing:DescribeLoadBalancerAttributes',
          'elasticloadbalancing:DescribeListeners',
          'elasticloadbalancing:DescribeListenerCertificates',
          'elasticloadbalancing:DescribeSSLPolicies',
          'elasticloadbalancing:DescribeRules',
          'elasticloadbalancing:DescribeTargetGroups',
          'elasticloadbalancing:DescribeTargetGroupAttributes',
          'elasticloadbalancing:DescribeTargetHealth',
          'elasticloadbalancing:DescribeTags',
          'elasticloadbalancing:DescribeTrustStores',
          'elasticloadbalancing:DescribeListenerAttributes',
          'elasticloadbalancing:DescribeCapacityReservation'
        ],
        resources: ['*']
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'cognito-idp:DescribeUserPoolClient',
          'acm:ListCertificates',
          'acm:DescribeCertificate',
          'iam:ListServerCertificates',
          'iam:GetServerCertificate',
          'waf-regional:GetWebACL',
          'waf-regional:GetWebACLForResource',
          'waf-regional:AssociateWebACL',
          'waf-regional:DisassociateWebACL',
          'wafv2:GetWebACL',
          'wafv2:GetWebACLForResource',
          'wafv2:AssociateWebACL',
          'wafv2:DisassociateWebACL',
          'shield:GetSubscriptionState',
          'shield:DescribeProtection',
          'shield:CreateProtection',
          'shield:DeleteProtection'
        ],
        resources: ['*']
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'ec2:AuthorizeSecurityGroupIngress',
          'ec2:RevokeSecurityGroupIngress'
        ],
        resources: ['*']
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['ec2:CreateSecurityGroup'],
        resources: ['*']
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['ec2:CreateTags'],
        resources: ['arn:aws:ec2:*:*:security-group/*'],
        conditions: {
          StringEquals: {
            'ec2:CreateAction': 'CreateSecurityGroup'
          },
          Null: {
            'aws:RequestTag/elbv2.k8s.aws/cluster': 'false'
          }
        }
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'ec2:CreateTags',
          'ec2:DeleteTags'
        ],
        resources: ['arn:aws:ec2:*:*:security-group/*'],
        conditions: {
          Null: {
            'aws:RequestTag/elbv2.k8s.aws/cluster': 'true',
            'aws:ResourceTag/elbv2.k8s.aws/cluster': 'false'
          }
        }
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'ec2:AuthorizeSecurityGroupIngress',
          'ec2:RevokeSecurityGroupIngress',
          'ec2:DeleteSecurityGroup'
        ],
        resources: ['*'],
        conditions: {
          Null: {
            'aws:ResourceTag/elbv2.k8s.aws/cluster': 'false'
          }
        }
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'elasticloadbalancing:CreateLoadBalancer',
          'elasticloadbalancing:CreateTargetGroup'
        ],
        resources: ['*'],
        conditions: {
          Null: {
            'aws:RequestTag/elbv2.k8s.aws/cluster': 'false'
          }
        }
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'elasticloadbalancing:CreateListener',
          'elasticloadbalancing:DeleteListener',
          'elasticloadbalancing:CreateRule',
          'elasticloadbalancing:DeleteRule'
        ],
        resources: ['*']
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'elasticloadbalancing:AddTags',
          'elasticloadbalancing:RemoveTags'
        ],
        resources: [
          'arn:aws:elasticloadbalancing:*:*:targetgroup/*/*',
          'arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*',
          'arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*'
        ],
        conditions: {
          Null: {
            'aws:RequestTag/elbv2.k8s.aws/cluster': 'true',
            'aws:ResourceTag/elbv2.k8s.aws/cluster': 'false'
          }
        }
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'elasticloadbalancing:AddTags',
          'elasticloadbalancing:RemoveTags'
        ],
        resources: [
          'arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*',
          'arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*',
          'arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*',
          'arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*'
        ]
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'elasticloadbalancing:ModifyLoadBalancerAttributes',
          'elasticloadbalancing:SetIpAddressType',
          'elasticloadbalancing:SetSecurityGroups',
          'elasticloadbalancing:SetSubnets',
          'elasticloadbalancing:DeleteLoadBalancer',
          'elasticloadbalancing:ModifyTargetGroup',
          'elasticloadbalancing:ModifyTargetGroupAttributes',
          'elasticloadbalancing:DeleteTargetGroup',
          'elasticloadbalancing:ModifyListenerAttributes',
          'elasticloadbalancing:ModifyCapacityReservation',
          'elasticloadbalancing:ModifyIpPools'
        ],
        resources: ['*'],
        conditions: {
          Null: {
            'aws:ResourceTag/elbv2.k8s.aws/cluster': 'false'
          }
        }
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['elasticloadbalancing:AddTags'],
        resources: [
          'arn:aws:elasticloadbalancing:*:*:targetgroup/*/*',
          'arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*',
          'arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*'
        ],
        conditions: {
          StringEquals: {
            'elasticloadbalancing:CreateAction': [
              'CreateTargetGroup',
              'CreateLoadBalancer'
            ]
          },
          Null: {
            'aws:RequestTag/elbv2.k8s.aws/cluster': 'false'
          }
        }
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'elasticloadbalancing:RegisterTargets',
          'elasticloadbalancing:DeregisterTargets'
        ],
        resources: ['arn:aws:elasticloadbalancing:*:*:targetgroup/*/*']
      })
    );

    albControllerRole.addToPolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [
          'elasticloadbalancing:SetWebAcl',
          'elasticloadbalancing:ModifyListener',
          'elasticloadbalancing:AddListenerCertificates',
          'elasticloadbalancing:RemoveListenerCertificates',
          'elasticloadbalancing:ModifyRule',
          'elasticloadbalancing:SetRulePriorities'
        ],
        resources: ['*']
      })
    );

    // ... rest of the code ...
  }
}
